package com.manywho.services.example.tests;

import com.manywho.sdk.api.describe.DescribeServiceRequest;
import io.restassured.http.ContentType;
import org.junit.Test;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class DescribeTest {
    @Test
    public void testDescribe() {
        DescribeServiceRequest request = new DescribeServiceRequest();

        given()
                .contentType(ContentType.JSON)
                .body(request)
                .when()
                .post("/metadata")
                .then()
                .statusCode(200)
                .body(notNullValue())
                .body("actions", hasSize(3))

                .body("actions[0].developerName", equalTo("Add Annotation"))
                .body("actions[0].developerSummary", equalTo("Add an annotation to a person"))
                .body("actions[0].isViewMessageAction", equalTo(false))
                .body("actions[0].serviceActionOutcomes", hasSize(0))
                .body("actions[0].serviceInputs", hasSize(2))
                .body("actions[0].serviceInputs[0].contentType", equalTo("ContentString"))
                .body("actions[0].serviceInputs[0].developerName", equalTo("Annotation"))
                .body("actions[0].serviceInputs[0].required", equalTo(true))
                .body("actions[0].serviceInputs[1].contentType", equalTo("ContentObject"))
                .body("actions[0].serviceInputs[1].developerName", equalTo("Person"))
                .body("actions[0].serviceInputs[1].required", equalTo(true))
                .body("actions[0].serviceInputs[1].typeElementDeveloperName", equalTo("Person"))
                .body("actions[0].serviceOutputs[0].contentType", equalTo("ContentString"))
                .body("actions[0].serviceOutputs[0].developerName", equalTo("Annotation"))
                .body("actions[0].serviceOutputs[0].required", equalTo(true))
                .body("actions[0].serviceOutputs[1].contentType", equalTo("ContentDateTime"))
                .body("actions[0].serviceOutputs[1].developerName", equalTo("Created At"))
                .body("actions[0].serviceOutputs[1].required", equalTo(true))
                .body("actions[0].serviceOutputs[2].contentType", equalTo("ContentObject"))
                .body("actions[0].serviceOutputs[2].developerName", equalTo("Person"))
                .body("actions[0].serviceOutputs[2].required", equalTo(true))
                .body("actions[0].serviceOutputs[2].typeElementDeveloperName", equalTo("Person"))
                .body("actions[0].uriPart", equalTo("actions/addannotation"))

                .body("actions[1].developerName", equalTo("Custom Action Name"))
                .body("actions[1].developerSummary", equalTo("Custom Action Summary"))
                .body("actions[1].isViewMessageAction", equalTo(false))
                .body("actions[1].serviceActionOutcomes", hasSize(0))
                .body("actions[1].serviceInputs", hasSize(1))
                .body("actions[1].serviceInputs[0].contentType", equalTo("ContentString"))
                .body("actions[1].serviceInputs[0].developerName", equalTo("Input 1"))
                .body("actions[1].serviceInputs[0].required", equalTo(false))
                .body("actions[1].serviceOutputs[0].contentType", equalTo("ContentString"))
                .body("actions[1].serviceOutputs[0].developerName", equalTo("Output 1"))
                .body("actions[1].serviceOutputs[0].required", equalTo(false))
                .body("actions[1].uriPart", equalTo("actions/custom-action"))

                .body("actions[2].developerName", equalTo("Send an Email"))
                .body("actions[2].developerSummary", equalTo("Send an email that gives some information"))
                .body("actions[2].isViewMessageAction", equalTo(false))
                .body("actions[2].serviceActionOutcomes", hasSize(0))
                .body("actions[2].serviceInputs", hasSize(3))
                .body("actions[2].serviceInputs[0].contentType", equalTo("ContentString"))
                .body("actions[2].serviceInputs[0].developerName", equalTo("Message"))
                .body("actions[2].serviceInputs[0].required", equalTo(true))
                .body("actions[2].serviceInputs[1].contentType", equalTo("ContentString"))
                .body("actions[2].serviceInputs[1].developerName", equalTo("Subject"))
                .body("actions[2].serviceInputs[1].required", equalTo(true))
                .body("actions[2].serviceInputs[2].contentType", equalTo("ContentString"))
                .body("actions[2].serviceInputs[2].developerName", equalTo("To"))
                .body("actions[2].serviceInputs[2].required", equalTo(true))
                .body("actions[2].serviceOutputs[0].contentType", equalTo("ContentDateTime"))
                .body("actions[2].serviceOutputs[0].developerName", equalTo("Sent At"))
                .body("actions[2].serviceOutputs[0].required", equalTo(true))
                .body("actions[2].uriPart", equalTo("actions/sendanemail"))

                .body("configurationValues", hasSize(2))
                .body("configurationValues[0].contentType", equalTo("ContentPassword"))
                .body("configurationValues[0].developerName", equalTo("Password"))
                .body("configurationValues[0].required", equalTo(false))
                .body("configurationValues[1].contentType", equalTo("ContentString"))
                .body("configurationValues[1].developerName", equalTo("Username"))
                .body("configurationValues[1].required", equalTo(false))

                .body("install.typeElements", hasSize(3))
                .body("install.typeElements[0].bindings", hasSize(1))
                .body("install.typeElements[0].bindings[0].databaseTableName", equalTo("custom-type-one"))
                .body("install.typeElements[0].bindings[0].developerName", equalTo("Custom Type One"))
                .body("install.typeElements[0].bindings[0].developerSummary", equalTo("The binding for Custom Type One"))
                .body("install.typeElements[0].bindings[0].propertyBindings", hasSize(2))
                .body("install.typeElements[0].bindings[0].propertyBindings[0].databaseFieldName", equalTo("property-one"))
                .body("install.typeElements[0].bindings[0].propertyBindings[0].typeElementPropertyDeveloperName", equalTo("Property One"))
                .body("install.typeElements[0].bindings[0].propertyBindings[1].databaseFieldName", equalTo("property-two"))
                .body("install.typeElements[0].bindings[0].propertyBindings[1].typeElementPropertyDeveloperName", equalTo("Property Two"))
                .body("install.typeElements[0].developerName", equalTo("Custom Type One"))
                .body("install.typeElements[0].developerSummary", nullValue())
                .body("install.typeElements[0].elementType", equalTo("TYPE"))
                .body("install.typeElements[0].properties", hasSize(2))
                .body("install.typeElements[0].properties[0].contentType", equalTo("ContentString"))
                .body("install.typeElements[0].properties[0].developerName", equalTo("Property One"))
                .body("install.typeElements[0].properties[1].contentType", equalTo("ContentString"))
                .body("install.typeElements[0].properties[1].developerName", equalTo("Property Two"))

                .body("install.typeElements[1].bindings", hasSize(1))
                .body("install.typeElements[1].bindings[0].databaseTableName", equalTo("Group"))
                .body("install.typeElements[1].bindings[0].developerName", equalTo("Group"))
                .body("install.typeElements[1].bindings[0].developerSummary", equalTo("The Group object structure"))
                .body("install.typeElements[1].bindings[0].propertyBindings", hasSize(1))
                .body("install.typeElements[1].bindings[0].propertyBindings[0].databaseFieldName", equalTo("Name"))
                .body("install.typeElements[1].bindings[0].propertyBindings[0].typeElementPropertyDeveloperName", equalTo("Name"))
                .body("install.typeElements[1].developerName", equalTo("Group"))
                .body("install.typeElements[1].developerSummary", equalTo("The Group object structure"))
                .body("install.typeElements[1].elementType", equalTo("TYPE"))
                .body("install.typeElements[1].properties", hasSize(1))
                .body("install.typeElements[1].properties[0].contentType", equalTo("ContentString"))
                .body("install.typeElements[1].properties[0].developerName", equalTo("Name"))

                .body("install.typeElements[2].bindings", hasSize(1))
                .body("install.typeElements[2].bindings[0].databaseTableName", equalTo("Person"))
                .body("install.typeElements[2].bindings[0].developerName", equalTo("Person"))
                .body("install.typeElements[2].bindings[0].developerSummary", equalTo("A description of a person"))
                .body("install.typeElements[2].bindings[0].propertyBindings", hasSize(9))
                .body("install.typeElements[2].bindings[0].propertyBindings[0].databaseFieldName", equalTo("Age"))
                .body("install.typeElements[2].bindings[0].propertyBindings[0].typeElementPropertyDeveloperName", equalTo("Age"))
                .body("install.typeElements[2].bindings[0].propertyBindings[1].databaseFieldName", equalTo("Biography"))
                .body("install.typeElements[2].bindings[0].propertyBindings[1].typeElementPropertyDeveloperName", equalTo("Biography"))
                .body("install.typeElements[2].bindings[0].propertyBindings[2].databaseFieldName", equalTo("Created At"))
                .body("install.typeElements[2].bindings[0].propertyBindings[2].typeElementPropertyDeveloperName", equalTo("Created At"))
                .body("install.typeElements[2].bindings[0].propertyBindings[3].databaseFieldName", equalTo("Groups"))
                .body("install.typeElements[2].bindings[0].propertyBindings[3].typeElementPropertyDeveloperName", equalTo("Groups"))
                .body("install.typeElements[2].bindings[0].propertyBindings[4].databaseFieldName", equalTo("Is Active?"))
                .body("install.typeElements[2].bindings[0].propertyBindings[4].typeElementPropertyDeveloperName", equalTo("Is Active?"))
                .body("install.typeElements[2].bindings[0].propertyBindings[5].databaseFieldName", equalTo("Manager"))
                .body("install.typeElements[2].bindings[0].propertyBindings[5].typeElementPropertyDeveloperName", equalTo("Manager"))
                .body("install.typeElements[2].bindings[0].propertyBindings[6].databaseFieldName", equalTo("Name"))
                .body("install.typeElements[2].bindings[0].propertyBindings[6].typeElementPropertyDeveloperName", equalTo("Name"))
                .body("install.typeElements[2].bindings[0].propertyBindings[7].databaseFieldName", equalTo("Password"))
                .body("install.typeElements[2].bindings[0].propertyBindings[7].typeElementPropertyDeveloperName", equalTo("Password"))
                .body("install.typeElements[2].bindings[0].propertyBindings[8].databaseFieldName", equalTo("Social Security Number"))
                .body("install.typeElements[2].bindings[0].propertyBindings[8].typeElementPropertyDeveloperName", equalTo("Social Security Number"))
                .body("install.typeElements[2].developerName", equalTo("Person"))
                .body("install.typeElements[2].developerSummary", equalTo("A description of a person"))
                .body("install.typeElements[2].elementType", equalTo("TYPE"))
                .body("install.typeElements[2].properties", hasSize(9))
                .body("install.typeElements[2].properties[0].contentType", equalTo("ContentNumber"))
                .body("install.typeElements[2].properties[0].developerName", equalTo("Age"))
                .body("install.typeElements[2].properties[1].contentType", equalTo("ContentContent"))
                .body("install.typeElements[2].properties[1].developerName", equalTo("Biography"))
                .body("install.typeElements[2].properties[2].contentType", equalTo("ContentDateTime"))
                .body("install.typeElements[2].properties[2].developerName", equalTo("Created At"))
                .body("install.typeElements[2].properties[3].contentType", equalTo("ContentList"))
                .body("install.typeElements[2].properties[3].developerName", equalTo("Groups"))
                .body("install.typeElements[2].properties[3].typeElementDeveloperName", equalTo("Group"))
                .body("install.typeElements[2].properties[4].contentType", equalTo("ContentBoolean"))
                .body("install.typeElements[2].properties[4].developerName", equalTo("Is Active?"))
                .body("install.typeElements[2].properties[5].contentType", equalTo("ContentObject"))
                .body("install.typeElements[2].properties[5].developerName", equalTo("Manager"))
                .body("install.typeElements[2].properties[5].typeElementDeveloperName", equalTo("Person"))
                .body("install.typeElements[2].properties[6].contentType", equalTo("ContentString"))
                .body("install.typeElements[2].properties[6].developerName", equalTo("Name"))
                .body("install.typeElements[2].properties[7].contentType", equalTo("ContentPassword"))
                .body("install.typeElements[2].properties[7].developerName", equalTo("Password"))
                .body("install.typeElements[2].properties[8].contentType", equalTo("ContentEncrypted"))
                .body("install.typeElements[2].properties[8].developerName", equalTo("Social Security Number"))

                .body("providesAutoBinding", equalTo(false))
                .body("providesDatabase", equalTo(true))
                .body("providesFiles", equalTo(true))
                .body("providesIdentity", equalTo(true))
                .body("providesListening", equalTo(true))
                .body("providesLogic", equalTo(true))
                .body("providesNotifications", equalTo(false))
                .body("providesSmartSave", equalTo(false))
                .body("providesSocial", equalTo(false))
                .body("providesSharing", equalTo(false))
                .body("providesViews", equalTo(false))
                .body("providesViews", equalTo(false))
                .body("providesVoting", equalTo(false))

                .body("uri", nullValue());
    }
}
